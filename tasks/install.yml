---
- name: "{{ exporter_name }}: Add system group"
  ansible.builtin.group:
    name: "{{ exporter_group }}"
    system: true
    state: present
  when: exporter_manage_user

- name: "{{ exporter_name }}: Add system user"
  ansible.builtin.user:
    name: "{{ exporter_user }}"
    group: "{{ exporter_group }}"
    groups: "{{ exporter_groups }}"
    system: true
    shell: /usr/sbin/nologin
    home: "{{ exporter_bin_dir }}"
    createhome: false
    state: present
  when: exporter_manage_user

- name: "{{ exporter_name }}: Create directories"
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: u=rwx,g=rx,o=rx
  loop:
    - "{{ exporter_bin_dir }}"
    - "{{ exporter_src_dir }}"

- name: "{{ exporter_name }}: Get GitHub release information"
  ansible.builtin.uri:
    url: >-
      {{ "https://api.github.com/repos/" + exporter_github_org + "/" + exporter_github_repo
         + "/releases"
         + ("/tags" if exporter_version != "latest" else "") + "/" + exporter_version }}
    method: GET
    return_content: true
    status_code: 200
    body_format: json
  register: _release_info
  when:
    - exporter_github_org != ""
    - exporter_github_repo != ""

- name: Download release archive
  vars:
    _exporter_archive_url: >-
      {% if exporter_archive_urls | length >= 1 -%}
      {{ exporter_archive_urls
         | select("search", exporter_binary, ignorecase=true)
         | select("search", "linux", ignorecase=true)
         | select("search", exporter_arch_map[ansible_architecture], ignorecase=true)
         | first
         | default(None) }}
      {%- else -%}
      {{ _release_info.json.assets
         | selectattr("name", "search", exporter_binary, ignorecase=true)
         | selectattr("name", "search", "linux", ignorecase=true)
         | selectattr("name", "search", exporter_arch_map[ansible_architecture], ignorecase=true)
         | map(attribute="browser_download_url")
         | first
         | default(None) }}
      {%- endif %}
    _exporter_checksum_url: >-
      {% if exporter_checksum_url == "" and exporter_checksums == "" -%}
      {{ _release_info.json.assets
         | selectattr("name", "equalto", exporter_github_checksum_filename)
         | map(attribute="browser_download_url")
         | first
         | default(None) }}
      {%- elif exporter_checksum_url != "" -%}
      {{ exporter_checksum_url }}
      {%- endif %}
    _exporter_archive_filename: "{{ _exporter_archive_url | split('/') | last }}"
    _exporter_archive_checksum: >-
      {% if _exporter_checksum_url | default("") != "" and exporter_checksums == "" -%}
      {{ lookup("url", _exporter_checksum_url, wantlist=True)
         | select("search", _exporter_archive_filename)
         | first | default("") | split(" ") | first | default(None) }}
      {%- elif exporter_checksums != "" -%}
      {% set _exporter_checksum_list = exporter_checksums | split('\n') -%}
      {{ _exporter_checksum_list
         | select("search", _exporter_archive_filename)
         | first | default("") | split(" ") | first | default(None) }}
      {%- endif %}
  block:
    - name: "{{ exporter_name }}: Download archive"
      ansible.builtin.get_url:
        url: "{{ _exporter_archive_url }}"
        dest: "{{ exporter_src_dir }}/{{ _exporter_archive_filename }}"
        checksum: "{{ exporter_checksum_type }}:{{ _exporter_archive_checksum }}"
        owner: root
        group: root
        mode: u=rw,g=r,o=r

    - name: "{{ exporter_name }}: Extract binary from archive"
      ansible.builtin.unarchive:
        src: "{{ exporter_src_dir }}/{{ _exporter_archive_filename }}"
        remote_src: true
        dest: "{{ exporter_bin_dir }}"
        extra_opts:
          - "--strip-components={{ exporter_strip_components }}"
          - "--wildcards"
          - "--no-anchored"
          - "{{ exporter_binary }}"
        owner: root
        group: root
      notify: "{{ exporter_handler }}"

    - name: Get downloaded archive files
      ansible.builtin.find:
        paths: "{{ exporter_src_dir }}"
        patterns: "{{ '*' + _exporter_archive_filename | splitext | last }}"
      register: _exporter_src_archives

    - name: Remove older downloaded archive files
      ansible.builtin.file:
        path: "{{ item['path'] }}"
        state: absent
      loop: "{{ _exporter_src_archives['files'] }}"
      loop_control:
        label: "{{ item['path'] }}"
      when:
        - "item['path'] | basename != _exporter_archive_filename"
        - "exporter_clean_src_dir"
